[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 2

[sub_resource type="VisualShaderNodeVectorDistance" id=2]

[sub_resource type="VisualShaderNodeScalarInterp" id=3]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShader" id=5]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:15
	vec3 n_out15p0;
	float n_out15p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out2p0.xy);
		n_out15p0 = _tex_read.rgb;
		n_out15p1 = _tex_read.a;
	}

// Distance:16
	vec3 n_in16p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_out16p0 = distance(n_out15p0, n_in16p1);

// ScalarMix:18
	float n_in18p0 = 0.00000;
	float n_in18p1 = 1.00000;
	float n_out18p0 = mix(n_in18p0, n_in18p1, n_out16p0);

// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out18p0;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( 9.38807, -4.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 860, 140 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( 160, 140 )
nodes/fragment/15/node = SubResource( 1 )
nodes/fragment/15/position = Vector2( 340, 120 )
nodes/fragment/16/node = SubResource( 2 )
nodes/fragment/16/position = Vector2( 520, 220 )
nodes/fragment/18/node = SubResource( 3 )
nodes/fragment/18/position = Vector2( 680, 200 )
nodes/fragment/connections = PoolIntArray( 15, 0, 0, 0, 2, 0, 15, 0, 15, 0, 16, 0, 16, 0, 18, 2, 18, 0, 0, 1 )

[resource]
shader = SubResource( 5 )
